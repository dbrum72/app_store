1. (terminal) - composer create-project --prefer-dist laravel/laravel backend

2. (Model) - use Illuminate\Database\Eloquent\SoftDeletes;
    (Migration) - $table->softDeletes();

3. (terminal) - composer require tymon/jwt-auth

4. (config/app.php)
        'providers' => [

            ...

            Tymon\JWTAuth\Providers\LaravelServiceProvider::class,
        ]

5. (terminal) - php artisan vendor:publish --provider="Tymon\JWTAuth\Providers\LaravelServiceProvider"
   (terminal) - php artisan jwt:secret

6. (Model) - use Tymon\JWTAuth\Contracts\JWTSubject;
            - class User extends Authenticatable implements JWTSubject { }

            - public function getJWTIdentifier()
                {
                    return $this->getKey();
                }

                /**
                 * Return a key value array, containing any custom claims to be added to the JWT.
                 *
                 * @return array
                 */
                public function getJWTCustomClaims()
                {
                    return [];
                }

7. (config/auth.php)
    'defaults' => [
        'guard' => 'api',
        'passwords' => 'users',
    ],

    ...

    'guards' => [
        'api' => [
            'driver' => 'jwt',
            'provider' => 'users',
        ],
    ],

8. (routes/api.php)
    Route::group([

        'middleware' => 'api',
        'namespace' => 'App\Http\Controllers',
        'prefix' => 'auth'

    ], function ($router) {

        Route::post('login', 'AuthController@login');
        Route::post('logout', 'AuthController@logout');
        Route::post('refresh', 'AuthController@refresh');
        Route::post('me', 'AuthController@me');

    });

9. (terminal) - php artisan make:controller AuthController

10. (AuthController)
    namespace App\Http\Controllers;

    use Illuminate\Http\Request;
    use Illuminate\Support\Facades\Auth;
    use App\Http\Controllers\Controller;

    class AuthController extends Controller
    {
        /**
         * Create a new AuthController instance.
         *
         * @return void
         */
        public function __construct()
        {
            $this->middleware('auth:api', ['except' => ['login']]);
        }

        /**
         * Get a JWT token via given credentials.
         *
         * @param  \Illuminate\Http\Request  $request
         *
         * @return \Illuminate\Http\JsonResponse
         */
        public function login(Request $request)
        {
            $credentials = $request->only('email', 'password');

            if ($token = $this->guard()->attempt($credentials)) {
                return $this->respondWithToken($token);
            }

            return response()->json(['error' => 'Unauthorized'], 401);
        }

        /**
         * Get the authenticated User
         *
         * @return \Illuminate\Http\JsonResponse
         */
        public function me()
        {
            return response()->json($this->guard()->user());
        }

        /**
         * Log the user out (Invalidate the token)
         *
         * @return \Illuminate\Http\JsonResponse
         */
        public function logout()
        {
            $this->guard()->logout();

            return response()->json(['message' => 'Successfully logged out']);
        }

        /**
         * Refresh a token.
         *
         * @return \Illuminate\Http\JsonResponse
         */
        public function refresh()
        {
            return $this->respondWithToken($this->guard()->refresh());
        }

        /**
         * Get the token array structure.
         *
         * @param  string $token
         *
         * @return \Illuminate\Http\JsonResponse
         */
        protected function respondWithToken($token)
        {
            return response()->json([
                'access_token' => $token,
                'token_type' => 'bearer',
                'expires_in' => $this->guard()->factory()->getTTL() * 60,
                'userName' => Auth::user()->name,
                'userMail' => Auth::user()->email
            ]);
        }

        /**
         * Get the guard to be used during authentication.
         *
         * @return \Illuminate\Contracts\Auth\Guard
         */
        public function guard()
        {
            return Auth::guard();
        }
    }

11. (terminal) php artisan make:seeder UserSeeder

12. (UserSeeder.php)

    namespace Database\Seeders;
    use App\Models\User;

    use Illuminate\Database\Console\Seeds\WithoutModelEvents;
    use Illuminate\Database\Seeder;

    class UserSeeder extends Seeder {
        
        public function run(): void {

            User::create([
                'name' => 'Dario Brum',
                'email' => 'dbrum72@gmail.com',
                'password' => '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi'
            ]);
        }
    }

13. (DatabaseSeeder.php)

    $this->call(UserSeeder::class);

14. (terminal) - php artisan migrate --seed
